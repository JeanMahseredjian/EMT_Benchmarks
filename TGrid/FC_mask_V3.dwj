//	Last change: JEAN MAHSEREDJIAN 2015-06-07 9:49:59 PM
//*This script is used for the FC wind generator model.
// This scripts allows to modify parameters that are not accessible on the main mask.

with (Math) {

    //////////////////////////////////////////////////_BASIC CALCULATIONS //////////////////////////////////////////////////
    //* Fundamental Period
    Period = 1 / Freq;          // Period in s
    period = Period;
    w = 2 * PI * Freq;
    //* Total Wind park S and P
    Sgen_MVA = Pgen_MW * 1.11;                 // Rated apparent power of wind generator (MVA). Note that 11% of reserve power is added
    Pgen_W = Pgen_MW * 1e6;                    // Rated active power of wind generator (W)
    Sgen_VA = Sgen_MVA * 1e6;                  // Rated apparent power of wind generator (VA). Note that 11% of reserve power is added.
    Spark_VA = Ngen * Sgen_VA;                 // Total aggregated wind park S (VA)
    Spark_MVA = Ngen * Sgen_VA / 1e6;          // Total aggregated wind park S (MVA), ASM machine uses MVA selection
    Ppark_W = Ngen * Pgen_W;                   // Total aggregated wind park P (W) (used for the load-flow device)
    Qpark_Var = Qref_pu * Spark_VA;            // Total aggregated wind park Q (Var) (used for the load-flow device when Q or Q+Vac control is selected)
    Vdc_V = Vdc_kV * 1e3;                      // DC voltage (V)
    //* base calculations
    Vbase_VRMSLL = Vgen_kVRMSLL * 1e3;                             // Rated generator voltage (VRMSLL)
    Vbase_V = Vbase_VRMSLL * sqrt(2 / 3);                          // Peak generator voltage (V)
    Ibase_A = Spark_VA / Vbase_VRMSLL * sqrt(2 / 3);               // Peak generator current (A)
    Zbase_Ohm = (Vgen_kVRMSLL * Vgen_kVRMSLL) / Spark_MVA;         // Base impedance (Ohm)

    //////////////////////////////////////////////////_PERMANENT MAGNETIC GENERATOR & AC/DC/AC CONVERTER PARAMETERS //////////////////////////////////////////////////
    //* PMSG parameters (see PMSG_FC/PMSM)
    npoles = 6;                             // Number of poles of the asynchronous generator 
    Rs_pu = 0.002                           // in pu
    Xl_pu = 0.05                            // in pu
    Xo_pu = 0.05                            // in pu
    Xd_pu = 0.6                             // in pu
    Xq_pu = 0.6                             // in pu
    Rs_Ohm = Rs_pu * Zbase_Ohm              // in Ohm
    Ll_H = Xl_pu * Zbase_Ohm / w            // in H
    Lo_H = Xo_pu * Zbase_Ohm / w            // in H
    Ld_H = Xd_pu * Zbase_Ohm / w            // in H
    Lq_H = Xq_pu * Zbase_Ohm / w            // in H
    Hgen = 1.0                              // in sec
    D = 0.0
    Flux_pu = 1                             // Flux linkage in pu
    Flux_Wb = Flux_pu * Vbase_VRMSLL / w;   //in Wb

    //* Choke impedance (see PMSG_FC/Choke)
    Rchoke_pu = 1.5e-3;                                     // in pu
    Rchoke_Ohm = Rchoke_pu * Zbase_Ohm;                     // in Ohm
    Lchoke_pu = 0.15;                                       // in pu
    Lchoke_H = Lchoke_pu * Zbase_Ohm / w;                   // in H

    //* AC/DC/AC Converter parameters (see PMSG_FC/BtoB_converter)
    E_Cdc = 5;                                                  // in KJ/MVA
    Cdc_F = E_Cdc * 1e-3 / (1 / 2 * pow(Vdc_V, 2) / Sgen_VA);   // DC capacitor (F)
    CdcPark_F = Cdc_F * Ngen;                                   // Aggregated DC capacitor (F)
    CarrierSignal_Freq = 3e3;                                   // PWM Carrier signal frequency (Hz) (used only for Detailed Converter Model)
    CarrierSignal_ratio = CarrierSignal_Freq / Freq;            // PWM carrier signal ratio (used only for Detailed Converter Model)
    Rsnubber_Ohm = 3000;                                        // IGBT/diode resistance snubber (Ohm) (used only for Detailed Converter Model)
    Csnubber_F = 1e-6;                                          // IGBT/diode capacitor snubber (F) (used only for Detailed Converter Model)
    Rchopper_Ohm = 0.2;                                         // Chopper resistance in Ohm
    RchopperPark_Ohm = Rchopper_Ohm / Ngen;                     // Aggregation of the chopper resistance

    //* High pass filter parameters (see PMSG_FC/filter_stator_ASM )
    Qfilter_Var = 150e3 * Ngen                                                  // Reactive power generated by each filter
    n1 = CarrierSignal_ratio                                                    // First tuning harmonic
    n2 = CarrierSignal_ratio * 2                                                // Second tuning harmonic
    QF = 1e3                                                                    // Quality factor 
    Cfilter1_F = Qfilter_Var / (Vbase_VRMSLL * Vbase_VRMSLL * 2 * PI * Freq);   // capacitor in F
    Lfilter1_H = 1 / (Cfilter1_F * pow((n1 * Freq * 2 * PI), 2));               // inductance in H
    Rfilter1_Ohm = QF * 2 * PI * n1 * Freq * Lfilter1_H;                        // resistance in Ohm
    Cfilter2_F = Cfilter1_F;                                                    // capacitor in F
    Lfilter2_H = 1 / (Cfilter2_F * pow((n2 * Freq * 2 * PI), 2));               // inductance in H
    Rfilter2_Ohm = QF * 2 * PI * n2 * Freq * Lfilter2_H;                        // resistance in Ohm

    //////////////////////////////////////////////////_WIND TURBINE PARAMETERS //////////////////////////////////////////////////
    //* Blade and Gearbox parameters (see WIND_TURBINE/Wind_Power)
    blade_radius = (sqrt(pow(36, 2) / 2e6 * Pgen_W)).toFixed(2);           // Blade radius (m) is in function of the rated power.
    gearbox_ratio = ((Freq / 60) * (sqrt(pow(44, 2) / 2e6 * Pgen_W))).toFixed(2);                                               // Gearbox ratio. Note that the ratio is adjusted depending on the frequency used in order to preserve the same tip-speed value (Lambda).
    ro = 1.225;                                                                     // air density (kg/m^3)
    K_speed = 2 * PI * Freq / (npoles / 2) * blade_radius / gearbox_ratio;          // speed coefficient defined as: Lambda = K_speed / wind_speed * w_rotor;
    K_air = (1 / 2) * PI * blade_radius * blade_radius * ro;                        // air coefficient defined as: Pair = K_air * Cp * (wind_speed)^3; and K_air = 1/2 * ro * PI * R^2

    //* Shaft and train drive parameters (see WIND_TURBINE/Two_mass_model)
    Ksh = 0.3;                  // Speed deviation damping
    Dm = 1.5;                   // Mutual damping
    Ht = 4.0                    // Inertia constant (s)

    // Cp function parameters (see WIND_TURBINE/Wind_Power/Cp_function)
    c1 = 0.645;
    c2 = 116;
    c3 = 0.4;
    c4 = 5;
    c5 = 21;
    c6 = 9.12e-3;
    c7 = 0.08;
    c8 = 0.035;
    Pitch_max_deg = 27;           // Maximum pitch angle in degree
    Pitch_min_deg = -2            // Minimum pitch angle in degree

    //////////////////////////////////////////////////_TRANSFORMER PARAMETERS //////////////////////////////////////////////////
    //* Wind generator transformer parameters (see Transformer)
    Rtransfo_sec_Ohm = (Rtransfo_pu * 0.1 * Vgrid_kVRMSLL * Vgrid_kVRMSLL / Spark_MVA);                     // Secondary winding resistance, Ohm
    Ltransfo_sec_H = (Xtransfo_pu * 0.1 * Vgrid_kVRMSLL * Vgrid_kVRMSLL / Spark_MVA) / (2 * PI * Freq);     // Secondary winding inductance, H
    Rtransfo_prim_Ohm = (Rtransfo_pu * 0.9 * Vgen_kVRMSLL * Vgen_kVRMSLL / Spark_MVA);                      // Primary winding resistance, Ohm
    Ltransfo_prim_H = (Xtransfo_pu * 0.9 * Vgen_kVRMSLL * Vgen_kVRMSLL / Spark_MVA) / (2 * PI * Freq);      // Primary winding inductance, H
    Transfo_ratio = Vgen_kVRMSLL / Vgrid_kVRMSLL / sqrt(3);                                                 // Turns ratio

    //////////////////////////////////////////////////_CONTROL SYSTEM PARAMETERS //////////////////////////////////////////////////
    //* Pitch control (see CONTROL/Pitch_Control )
    // NB: Ptich Control Gains are tuned by trial and error
    PitchCtrl_ki = 30;              // Integral Gain of the Pitch control 
    PitchCtrl_kp = 150;             // Proportional Gain of the Pitch control
    PitchCtrl_Td_d = 30;            // Derivative Gain of the Pitch control
    PitchCtrl_tau_d = 5e-3;         // derivative filter in s
    w_rotor_max_pu = 1;             // maximum rotor speed in pu
    Pitch_rate = 10                 // Slop rate (see Pitch_Control/Rate_Limiter)

    //* Rotor control (see CONTROL/Rotor_Control ) 
    //+Rotor Inner current control
    eps = 0.7;                                                // Damping ratio
    w_i = 3 / (eps * TimeConstant_i_pmsg);                    // Impulse of the closed loop control
    pmsgCtrl_ki = ((Xd_pu + Xl_pu) / w) * w_i * w_i;          // Integral Gain of the Inner Current control
    pmsgCtrl_kp = 2 * eps * w_i * ((Xd_pu + Xl_pu) / w);      // Proportional gain of the Inner Current control 
    //+Maximum Power Point Tracking (MPPT)
    Lambda_optimal = 8.48;                                                         // Optimal Lambda in order to have the rated active power for a wind speed = 12 m/s
    Cp_max = 0.477;                                                                 // Related Cp_max in order to have the rated active power for a wind speed = 12 m/s
    K_optimal_pu = K_air * Cp_max * pow(K_speed / Lambda_optimal, 3) / Sgen_VA;     // Constant coefficient defined as: P = K_optimal_pu * w^3

    //* Grid control (see CONTROL/Grid_Control )
    //+Grid Inner current control
    eps = 1;                                              // Damping ratio
    w_i = 3 / (eps * TimeConstant_i_grid);                  // Impulse of the closed loop control
    GridCtrl_ki = (Lchoke_pu / w) * w_i * w_i;              // Integral Gain of the Inner Current control 
    GridCtrl_kp = 5 * 2 * eps * w_i * (Lchoke_pu / w);          // Proportional gain of the Inner Current control 
    //+Vdc control
    E_Cdc_J = 0.5 * CdcPark_F * Vdc_V * Vdc_V;           // Energy stored in the DC capacitor (Joule)
    H_Cdc = E_Cdc_J / (1 * Ppark_W);                     // Static moment of inertia (S)
    eps = 0.7;               		                     // Damping ratio
    w_Vdc = 3 / (eps * TimeConstant_Vdc); 	             // Time response for 5% (sec)
    VdcCtrl_ki = 2 * H_Cdc * w_Vdc * w_Vdc;     	     // Proportional Gain of Vdc control
    VdcCtrl_kp = 2 * 2 * eps * w_Vdc * H_Cdc;   	     // Integral Gain of Vdc control 
    //+ Idq limit (see CONTROL/Grid_Control/Idq_ref_limiter1 )
    Q_priority = 1;                             // 1 = priority is given for reactive power (should be set for FRT capability). 0 = priority is given to active power
    I_lim_Grid_pu = 1.1;                        // Maximum Grid Converter Idq limit
    Id_lim_Grid_pu = 1;                         // Maximum Grid Converter Id limit, if Q_priority = 1   
    Iq_lim_Grid_pu = 1;                         // Maximum Grid Converter Iq limit, if Q_priority = 0
    //+Q control and Q+Vac control
    Qctrl_kp = 0;                               // Proportional Gain of Q control (Only Integral part of the PI control is used)
    Qctrl_ki = 3 / TimeConstant_Q;              // Integral Gain of Q control 
    //+Vac control
    X_tot = X_PCC_pu + Xtransfo_pu;                 // Total impedance in pu at wind generator connection point
    VacCtrl_kp = 1;                                 // Proportional Gain of Vac control (Only Integral part of the PI control is used)
    VacCtrl_ki = 3 / (X_tot * TimeConstant_Vac);    // Integral Gain of Vac control 

    //* PLL (see CONTROL/Computing_Variables/PLL)
    PLL_lim_low = 12
    PLL_lim_up = 12
    PLL_max_delay = 0.0223
    eps = 1;                                // Damping ratio
    w_i = 3 / (eps * TimeConstant_PLL);
    PLL_ki = 1 * w_i * w_i;                 // Integral Gain (rad/V)
    PLL_kp = 2 * eps * w_i * 1;             // Proportional Gain (rad/s/V)

    //* Protection system (see CONTROL/Protection )
    //+Deep Voltage Sag (DVS) protection 
    DVS_level = 0.001;                      // Threshold Voltage value in pu to activate the DVS protection
    DVS_hysteresis = 0.1;                   // Threshold Voltage value in pu to deactivate the DVS protection
    //+Converter Overcurrent limit
    I_RotorSideConv_max = 4;                // Threshold Current value in pu to activate RotorSide Overcurrent protection 
    I_GridSideConv_max = 4;                 // Threshold Current value in pu to activate GridSide Overcurrent protection 

    //////////////////////////////////////////////////_INITIALIZATION //////////////////////////////////////////////////
    //* Initialization of the Protection system (see CONTROL/Protection)
    init_Prot_delay = 0.3;                                                      // Delay time initialization of the Protection devices (s) (All protections, expect the Chopper, are deactivated for the specified time )

    //* Initialization of the WIND TURBINE model (see WIND_TURBINE/Two_mass_model)
    Lambda_ini_guess = Lambda_optimal;                                                  // Initial Lambda guess value
    Cp_init_guess = Cp_max;                                                             // Initial Cp guess value
    max_wind_speed = K_speed * w_rotor_max_pu / Lambda_ini_guess;                       // Maximum wind speed before the Pitch control is activated
    if (Mean_wind_speed > max_wind_speed) {
        Mean_wind_speed_init = max_wind_speed;
    }
    else {
        Mean_wind_speed_init = Mean_wind_speed;
    }

    init_w_turbine_pu = Mean_wind_speed_init * Lambda_ini_guess / K_speed;              // Initial Turbine speed in pu. The value is multiplied by a factor of losses.  
    init_Pturbine_pu = K_air * Cp_init_guess * pow(Mean_wind_speed_init, 3) / Sgen_VA;
    init_Tturbine_pu = init_Pturbine_pu / init_w_turbine_pu;                            // Initial Turbine Torque in pu. 

    /////////////////////////////////////////////////////////////_LOAD-FLOW CALCULATIONS //////////////////////////////////////////////////
    //* Load-Flow of the wind generators (see LF_init1)
    LF_V = Vref_pu * Vgen_kVRMSLL * 1000 * sqrt(2 / 3);               // Voltage for the LF device at the bus of the generator

    if (ControlMode == 1 || ControlMode == 3) { // if Q control or Q+Vac Control is selected, than PQ constraint is activated
        LF_t1 = -1;                                              // switch trick to active PQ constraint
        LF_t2 = 1e15;                                            // switch trick to active PQ constraint
        LF_Ppark1_W = init_Pturbine_pu * Spark_VA * (1 - Ngen * 1e-5); // Active power in W of PQ constraint. The value is multiplied by a factor of losses related with the number of WTG.
        LF_Ppark2_W = 0;                                         // Active power in W of PV constraint. The value is set to zero
    } else {                                    // if Vac control is selected, than PV constraint is activated
        LF_t1 = 1e15;                                            // switch trick to active PV constraint
        LF_t2 = -1;                                              // switch trick to active PV constraint
        LF_Ppark1_W = 0;                                         // Active power in W of PQ constraint. The value is set to zero
        LF_Ppark2_W = init_Pturbine_pu * Spark_VA * (1 - Ngen * 1e-5); // Active power in W of PV constraint. The value is multiplied by a factor of losses related with the number of WTG.
    }


}
